name: release-pr

on:
  pull_request:
    branches:
      - main

concurrency:
  group:  ${{ github.workflow }}-${{github.event_name}}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  IS_RELEASE: ${{ startsWith(github.event.pull_request.head.ref || github.head_ref, 'refs/heads/release/v') }}

jobs:
  test:    
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - id: pr
        run: |
          echo "${{env.IS_RELEASE}}"
          HEAD_REF=$(printf "%q" "${{ github.event.pull_request.head.ref || github.head_ref }}")
          IS_RELEASE=$(printf "%q" "${{ env.IS_RELEASE }}")
          echo "IS_RELEASE=${IS_RELEASE}"
          echo "HEAD_REF=${HEAD_REF}"
          RELEASE_VERSION=${HEAD_REF/refs\/heads\/release\//}          
          echo "::debug::RELEASE_VERSION=${RELEASE_VERSION}"

          echo "version=${RELEASE_VERSION}" >> "$GITHUB_OUTPUT"          
  


      - name: update action.yml to build locally
        run: |
          sed -i 's/.*image\:.*/  image\: \"Dockerfile\"/' action.yml
          cat action.yml      

      - name: build
        uses: ./ # Uses an action in the root directory
        with:
          action: build

      - run: |
          ls -l dist/

      - name: export
        uses: ./ # Uses an action in the root directory
        with:
          export: png
          output: images

      - run: |
          ls -l images/

      - name: codegen react
        uses: ./ # Uses an action in the root directory
        with:
          action: codegen

      - run: |
          ls -l

      - name: codegen mmd
        uses: ./ # Uses an action in the root directory
        with:
          codegen: mmd
          output: mmd

      - run: |
          ls -l mmd/

  deploy-release:
    if: ${{env.IS_RELEASE == 'true'}}
    needs: [test]
    name: Build Docker
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: wow-actions/use-app-token@v2
        id: likec4-bot
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.BOT_TOKEN }}
          env: release

      - name: checkout
        uses: actions/checkout@v4

      - id: pr
        run: |
          HEAD_REF=$(printf "%q" "${{ github.event.pull_request.head.ref || github.head_ref }}")                    
          echo "::debug::HEAD_REF=${HEAD_REF}"
          RELEASE_VERSION=${HEAD_REF/refs\/heads\/release\//}          
          echo "::debug::RELEASE_VERSION=${RELEASE_VERSION}"

          echo "version=${RELEASE_VERSION}" >> "$GITHUB_OUTPUT"          

      - name: build docker
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: ${{ github.repository }}
          username: ${{ env.BOT_NAME }}
          password: ${{ env.BOT_TOKEN }}
          registry: ghcr.io
          buildoptions: "--force-rm"
          tags: "${{ steps.pr.outputs.version }}"

      - name: update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.BOT_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}          

  # prepare-release:
  #   if: "github.ref == 'refs/heads/main'"
  #   name: Prepare Release
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - uses: wow-actions/use-app-token@v2
  #       id: likec4-bot
  #       with:
  #         app_id: ${{ secrets.BOT_APP_ID }}
  #         private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: update Dockerfile
  #       uses: jacobtomlinson/gha-find-replace@v3
  #       with:
  #         find: "ARG LIKEC4_VER.*"
  #         replace: "ARG LIKEC4_VER=${{ github.event.inputs.likec4 || 'latest' }}"          
  #         include: "Dockerfile"        

  #     - name: review Dockerfile
  #       run: cat Dockerfile

  #     - name: update action.yml
  #       uses: jacobtomlinson/gha-find-replace@v3
  #       with:
  #         find: ".*image\\:.*"
  #         replace: '  image: docker://ghcr.io/${{ github.repository }}:${{ github.event.inputs.version }}'
  #         include: "action.yml"     

  #     - name: review action.yml
  #       run: cat action.yml 

  #     - name: build docker
  #       uses: elgohr/Publish-Docker-Github-Action@v5
  #       with:
  #         name: ${{ github.repository }}
  #         username: ${{ env.BOT_NAME }}[bot]
  #         password: ${{ env.BOT_TOKEN }}
  #         registry: ghcr.io
  #         snapshot: true
  #         no_push: true